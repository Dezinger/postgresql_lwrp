;
;; Generated by Chef for <%= node['fqdn'] %>.
;; Local modifications will be overwritten.
;

;; database name = connect string
[databases]

<% node[:postgresql][:pgbouncer][:databases].each do |database, params| %>
<%= database %> = <% params.each do |param, value| %><%= param %>=<%= value %> <% end %>
<% end %>

;; Configuation section
[pgbouncer]

;;;
;;; Where to wait for clients
;;;
 
; ip address or * which means all ip-s
<% node[:postgresql][:pgbouncer][:bind].each_pair do |parameter, value| %>
<%= parameter %> = <%= value %>
<% end %>

;;;
;;; Authentication settings
;;;

; any, trust, plain, crypt, md5
<% node[:postgresql][:pgbouncer][:auth].each_pair do |parameter, value| %>
<%= parameter %> = <%= value %>
<% end %>


;;;
;;; Users allowed into database 'pgbouncer'
;;;

; comma-separated list of users, who are allowed to change settings
admin_users = <% node[:postgresql][:pgbouncer][:admin_users].each do |user| %><%= user %> <% end %>

; comma-separated list of users who are just allowed to use SHOW command
stats_users = <% node[:postgresql][:pgbouncer][:stats_users].each do |user| %><%= user %> <% end %>

;;;
;;; Pooler personality questions
;;;

; When server connection is released back to pool:
;   session      - after client disconnects
;   transaction  - after transaction finishes
;   statement    - after statement finishes
pool_mode = <%= node[:postgresql][:pgbouncer][:pool_mode] %>


;
; Query for cleaning connection immidiately after releasing from client.
;
; Query for 8.3+:
;   DISCARD ALL;
;
; Older versions:
;   RESET ALL; SET SESSION AUTHORIZATION DEFAULT
;
server_reset_query = <%= node[:postgresql][:pgbouncer][:server_reset_query] %>

;
; Comma-separated list of parameters to ignore when given
; in startup packet.  Newer JDBC versions require the
; extra_float_digits here.

<% node[:postgresql][:pgbouncer][:misc].each do |parameter, value| %>
<%= parameter %> = <%= value %>
<% end %>

;
; When taking idle server into use, this query is ran first.
;   SELECT 1
;
server_check_query = select 1

; If server was used more recently that this many seconds ago,
; skip the check query.  Value 0 may or may not run in immidiately.
server_check_delay = 10

;;;
;;; Connection limits
;;;

<% node[:postgresql][:pgbouncer][:limits].each_pair do |parameter, value| %>
<%= parameter %> = <%= value %>
<% end %>

;;;
;;; Log settings
;;;

<% node[:postgresql][:pgbouncer][:logger].each_pair do |parameter, value| %>
<%= parameter %> = <%= value %>
<% end %>

; If off, then server connections are reused in LIFO manner
;server_round_robin = 0

;;;
;;; Timeouts
;;;

;; Close server connection if its been connected longer.
;server_lifetime = 1200

;; Close server connection if its not been used in this time.
;; Allows to clean unneccessary connections from pool after peak.
;server_idle_timeout = 60

;; Cancel connection attepmt if server does not answer takes longer.
;server_connect_timeout = 15

;; If server login failed (server_connect_timeout or auth failure)
;; then wait this many second.
;server_login_retry = 15

;; Dangerous.  Server connection is closed if query does not return
;; in this time.  Should be used to survive network problems,
;; _not_ as statement_timeout. (default: 0)
;query_timeout = 0

;; Dangerous.  Client connection is closed if the query is not assigned
;; to a server in this time.  Should be used to limit the number of queued
;; queries in case of a database or network failure. (default: 0)
;query_wait_timeout = 0

;; Dangerous.  Client connection is closed if no activity in this time.
;; Should be used to survive network problems. (default: 0)
;client_idle_timeout = 0

;; Disconnect clients who have not managed to log in after connecting
;; in this many seconds.
;client_login_timeout = 60

;; Clean automatically created database entries (via "*") if they
;; stay unused in this many seconds.
; autodb_idle_timeout = 3600

;;;
;;; Low-level tuning options
;;;

;; buffer for streaming packets
;pkt_buf = 2048

;; man 2 listen
listen_backlog = 1024

;; networking options, for info: man 7 tcp

<% node[:postgresql][:pgbouncer][:network].each_pair do |parameter, value| %>
<%= parameter %> = <%= value %>
<% end %>

;; linux: notify program about new connection only if there
;; is also data received.  (Seconds to wait.)
;; On Linux the default is 45, on other OS'es 0.
;tcp_defer_accept = 0

;; In-kernel buffer size (linux default: 4096)
;tcp_socket_buffer = 0

;; whether tcp keepalive should be turned on (0/1)
;tcp_keepalive = 0

;; following options are linux-specific.
;; they also require tcp_keepalive=1

;; count of keepaliva packets
;tcp_keepcnt = 0

;; how long the connection can be idle,
;; before sending keepalive packets
;tcp_keepidle = 0

;; The time between individual keepalive probes.
;tcp_keepintvl = 0

